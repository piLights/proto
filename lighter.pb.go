// Code generated by protoc-gen-go.
// source: lighter.proto
// DO NOT EDIT!

package LighterGRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogLevel int32

const (
	LogLevel_DEBUG LogLevel = 0
	LogLevel_INFO  LogLevel = 1
	LogLevel_WARN  LogLevel = 2
	LogLevel_ERROR LogLevel = 3
	LogLevel_PANIC LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "DEBUG",
	1: "INFO",
	2: "WARN",
	3: "ERROR",
	4: "PANIC",
}
var LogLevel_value = map[string]int32{
	"DEBUG": 0,
	"INFO":  1,
	"WARN":  2,
	"ERROR": 3,
	"PANIC": 4,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}
func (LogLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ColorMessage struct {
	Onstate  bool   `protobuf:"varint,1,opt,name=onstate" json:"onstate,omitempty"`
	R        int32  `protobuf:"varint,2,opt,name=r" json:"r,omitempty"`
	G        int32  `protobuf:"varint,3,opt,name=g" json:"g,omitempty"`
	B        int32  `protobuf:"varint,4,opt,name=b" json:"b,omitempty"`
	Opacity  int32  `protobuf:"varint,5,opt,name=opacity" json:"opacity,omitempty"`
	DeviceID string `protobuf:"bytes,6,opt,name=deviceID" json:"deviceID,omitempty"`
	Password string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
}

func (m *ColorMessage) Reset()                    { *m = ColorMessage{} }
func (m *ColorMessage) String() string            { return proto.CompactTextString(m) }
func (*ColorMessage) ProtoMessage()               {}
func (*ColorMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type StateMessage struct {
	Onstate  bool   `protobuf:"varint,1,opt,name=onstate" json:"onstate,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *StateMessage) Reset()                    { *m = StateMessage{} }
func (m *StateMessage) String() string            { return proto.CompactTextString(m) }
func (*StateMessage) ProtoMessage()               {}
func (*StateMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ScheduledSwitch struct {
	Time     int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Onstate  bool   `protobuf:"varint,2,opt,name=onstate" json:"onstate,omitempty"`
	DeviceID string `protobuf:"bytes,3,opt,name=deviceID" json:"deviceID,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *ScheduledSwitch) Reset()                    { *m = ScheduledSwitch{} }
func (m *ScheduledSwitch) String() string            { return proto.CompactTextString(m) }
func (*ScheduledSwitch) ProtoMessage()               {}
func (*ScheduledSwitch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type LogEntry struct {
	Time    int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type LogRequest struct {
	LogLevel LogLevel `protobuf:"varint,1,opt,name=logLevel,enum=LighterGRPC.LogLevel" json:"logLevel,omitempty"`
	Amount   int32    `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Password string   `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*ColorMessage)(nil), "LighterGRPC.ColorMessage")
	proto.RegisterType((*StateMessage)(nil), "LighterGRPC.StateMessage")
	proto.RegisterType((*ScheduledSwitch)(nil), "LighterGRPC.ScheduledSwitch")
	proto.RegisterType((*LogEntry)(nil), "LighterGRPC.LogEntry")
	proto.RegisterType((*LogRequest)(nil), "LighterGRPC.LogRequest")
	proto.RegisterEnum("LighterGRPC.LogLevel", LogLevel_name, LogLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Lighter service

type LighterClient interface {
	CheckConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (Lighter_CheckConnectionClient, error)
	LoadServerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Lighter_LoadServerLogClient, error)
	ScheduleSwitchState(ctx context.Context, in *ScheduledSwitch, opts ...grpc.CallOption) (*Confirmation, error)
	SetColor(ctx context.Context, in *ColorMessage, opts ...grpc.CallOption) (*Confirmation, error)
	SwitchState(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*Confirmation, error)
}

type lighterClient struct {
	cc *grpc.ClientConn
}

func NewLighterClient(cc *grpc.ClientConn) LighterClient {
	return &lighterClient{cc}
}

func (c *lighterClient) CheckConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (Lighter_CheckConnectionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lighter_serviceDesc.Streams[0], c.cc, "/LighterGRPC.Lighter/CheckConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &lighterCheckConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lighter_CheckConnectionClient interface {
	Recv() (*ColorMessage, error)
	grpc.ClientStream
}

type lighterCheckConnectionClient struct {
	grpc.ClientStream
}

func (x *lighterCheckConnectionClient) Recv() (*ColorMessage, error) {
	m := new(ColorMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lighterClient) LoadServerLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Lighter_LoadServerLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lighter_serviceDesc.Streams[1], c.cc, "/LighterGRPC.Lighter/LoadServerLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &lighterLoadServerLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lighter_LoadServerLogClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type lighterLoadServerLogClient struct {
	grpc.ClientStream
}

func (x *lighterLoadServerLogClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lighterClient) ScheduleSwitchState(ctx context.Context, in *ScheduledSwitch, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/ScheduleSwitchState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterClient) SetColor(ctx context.Context, in *ColorMessage, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/SetColor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterClient) SwitchState(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/SwitchState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lighter service

type LighterServer interface {
	CheckConnection(*Request, Lighter_CheckConnectionServer) error
	LoadServerLog(*LogRequest, Lighter_LoadServerLogServer) error
	ScheduleSwitchState(context.Context, *ScheduledSwitch) (*Confirmation, error)
	SetColor(context.Context, *ColorMessage) (*Confirmation, error)
	SwitchState(context.Context, *StateMessage) (*Confirmation, error)
}

func RegisterLighterServer(s *grpc.Server, srv LighterServer) {
	s.RegisterService(&_Lighter_serviceDesc, srv)
}

func _Lighter_CheckConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LighterServer).CheckConnection(m, &lighterCheckConnectionServer{stream})
}

type Lighter_CheckConnectionServer interface {
	Send(*ColorMessage) error
	grpc.ServerStream
}

type lighterCheckConnectionServer struct {
	grpc.ServerStream
}

func (x *lighterCheckConnectionServer) Send(m *ColorMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Lighter_LoadServerLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LighterServer).LoadServerLog(m, &lighterLoadServerLogServer{stream})
}

type Lighter_LoadServerLogServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type lighterLoadServerLogServer struct {
	grpc.ServerStream
}

func (x *lighterLoadServerLogServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Lighter_ScheduleSwitchState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledSwitch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LighterServer).ScheduleSwitchState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.Lighter/ScheduleSwitchState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LighterServer).ScheduleSwitchState(ctx, req.(*ScheduledSwitch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lighter_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LighterServer).SetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.Lighter/SetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LighterServer).SetColor(ctx, req.(*ColorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lighter_SwitchState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LighterServer).SwitchState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.Lighter/SwitchState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LighterServer).SwitchState(ctx, req.(*StateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lighter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LighterGRPC.Lighter",
	HandlerType: (*LighterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleSwitchState",
			Handler:    _Lighter_ScheduleSwitchState_Handler,
		},
		{
			MethodName: "SetColor",
			Handler:    _Lighter_SetColor_Handler,
		},
		{
			MethodName: "SwitchState",
			Handler:    _Lighter_SwitchState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckConnection",
			Handler:       _Lighter_CheckConnection_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadServerLog",
			Handler:       _Lighter_LoadServerLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("lighter.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0x9b, 0x40,
	0x10, 0x0d, 0x1f, 0xb6, 0xc9, 0xc4, 0x6e, 0xd0, 0xa6, 0x6d, 0xa8, 0xd5, 0x43, 0xc5, 0xa9, 0xea,
	0x01, 0xb5, 0xe9, 0xa5, 0xb7, 0x2a, 0x26, 0x4e, 0x64, 0x89, 0x3a, 0xd6, 0xa2, 0xaa, 0xd7, 0x62,
	0x98, 0x62, 0x14, 0xcc, 0xba, 0xcb, 0xda, 0x56, 0xfe, 0x4f, 0xff, 0x61, 0xff, 0x40, 0xcd, 0x02,
	0x11, 0x76, 0x64, 0x7a, 0xdb, 0xb7, 0x8f, 0x99, 0xf7, 0xde, 0xee, 0xb0, 0x30, 0x48, 0x93, 0x78,
	0x21, 0x90, 0x3b, 0x2b, 0xce, 0x04, 0x23, 0x67, 0x5e, 0x09, 0xef, 0xe8, 0xcc, 0x1d, 0x0e, 0x62,
	0xcc, 0x90, 0x07, 0x69, 0xc9, 0xd9, 0x7f, 0x14, 0xe8, 0xbb, 0x2c, 0x65, 0xfc, 0x1b, 0xe6, 0x79,
	0x10, 0x23, 0xb1, 0xa0, 0xc7, 0xb2, 0x5c, 0x04, 0x02, 0x2d, 0xe5, 0x9d, 0xf2, 0xde, 0xa0, 0x35,
	0x24, 0x7d, 0x50, 0xb8, 0xa5, 0xee, 0xf6, 0x3a, 0x54, 0xe1, 0x05, 0x8a, 0x2d, 0xad, 0x44, 0x71,
	0x81, 0xe6, 0x96, 0x5e, 0xa2, 0xb9, 0xec, 0xb1, 0x0a, 0xc2, 0x44, 0x3c, 0x5a, 0x1d, 0xb9, 0x57,
	0x43, 0x32, 0x04, 0x23, 0xc2, 0x4d, 0x12, 0xe2, 0xe4, 0xc6, 0xea, 0xee, 0xa8, 0x53, 0xfa, 0x84,
	0x0b, 0x6e, 0x15, 0xe4, 0xf9, 0x96, 0xf1, 0xc8, 0xea, 0x95, 0x5c, 0x8d, 0xed, 0x9f, 0xd0, 0xf7,
	0x0b, 0x13, 0xff, 0x77, 0xd9, 0x54, 0x50, 0x5b, 0x14, 0xb4, 0x03, 0x85, 0x2d, 0x9c, 0xfb, 0xe1,
	0x02, 0xa3, 0x75, 0x8a, 0x91, 0xbf, 0x4d, 0x44, 0xb8, 0x20, 0x04, 0x74, 0x91, 0x2c, 0x4b, 0x05,
	0x8d, 0xca, 0x75, 0x53, 0x58, 0x3d, 0x2e, 0xac, 0xb5, 0x08, 0xeb, 0x07, 0xc2, 0x5f, 0xc0, 0xf0,
	0x58, 0x3c, 0xce, 0x04, 0x7f, 0x3c, 0xa6, 0xb8, 0x2c, 0x53, 0x57, 0x79, 0x6a, 0x68, 0xe7, 0x00,
	0xbb, 0x4a, 0x8a, 0xbf, 0xd7, 0x98, 0x0b, 0xf2, 0x09, 0x8c, 0x94, 0xc5, 0x1e, 0x6e, 0x30, 0x95,
	0xf5, 0x2f, 0xae, 0x5e, 0x39, 0x8d, 0x8b, 0x77, 0xbc, 0x8a, 0xa4, 0x4f, 0x9f, 0x91, 0xd7, 0xd0,
	0x0d, 0x96, 0x6c, 0x9d, 0x89, 0xea, 0x5a, 0x2b, 0xd4, 0x76, 0x4e, 0x1f, 0xbe, 0x4a, 0xbb, 0x65,
	0xfd, 0x29, 0x74, 0x6e, 0xc6, 0xa3, 0xef, 0x77, 0xe6, 0x09, 0x31, 0x40, 0x9f, 0x4c, 0x6f, 0xef,
	0x4d, 0xa5, 0x58, 0xfd, 0xb8, 0xa6, 0x53, 0x53, 0x2d, 0xe8, 0x31, 0xa5, 0xf7, 0xd4, 0xd4, 0x8a,
	0xe5, 0xec, 0x7a, 0x3a, 0x71, 0x4d, 0xfd, 0xea, 0xaf, 0x0a, 0xbd, 0xca, 0x17, 0xb9, 0x85, 0x73,
	0x77, 0x81, 0xe1, 0x83, 0xcb, 0xb2, 0x0c, 0x43, 0x91, 0xb0, 0x8c, 0xbc, 0xdc, 0x33, 0x5d, 0x85,
	0x1b, 0xbe, 0xd9, 0xdb, 0x6d, 0x0e, 0xac, 0x7d, 0xf2, 0x51, 0x21, 0x2e, 0x0c, 0x3c, 0x16, 0x44,
	0x3e, 0xf2, 0x0d, 0xf2, 0x9d, 0x3d, 0x72, 0x79, 0x18, 0xbd, 0x6e, 0xf4, 0xec, 0x4c, 0xe4, 0xc1,
	0xcb, 0x26, 0x33, 0xb8, 0xa8, 0x27, 0xa0, 0x1c, 0x00, 0x39, 0x71, 0xe4, 0xed, 0x5e, 0xc5, 0xc1,
	0x8c, 0x3c, 0x33, 0x96, 0xfd, 0x4a, 0xf8, 0x32, 0x28, 0x92, 0xd8, 0x27, 0x64, 0x04, 0x86, 0x8f,
	0x42, 0xba, 0x25, 0xc7, 0x13, 0xb4, 0xf7, 0x18, 0xc3, 0x59, 0xd3, 0xcd, 0xfe, 0xb7, 0xcd, 0x7f,
	0xa2, 0xb5, 0xcd, 0xe8, 0x12, 0x2e, 0x22, 0x74, 0x62, 0xbe, 0xce, 0x92, 0xf0, 0x01, 0x9d, 0xea,
	0x81, 0x98, 0x29, 0xf3, 0xae, 0x7c, 0x07, 0x3e, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x13,
	0x1a, 0x50, 0x34, 0x04, 0x00, 0x00,
}
