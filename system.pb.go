// Code generated by protoc-gen-go.
// source: system.proto
// DO NOT EDIT!

package LighterGRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IPVersion_Version int32

const (
	IPVersion_DUAL     IPVersion_Version = 0
	IPVersion_IPV4ONLY IPVersion_Version = 1
	IPVersion_IPV6ONLY IPVersion_Version = 2
)

var IPVersion_Version_name = map[int32]string{
	0: "DUAL",
	1: "IPV4ONLY",
	2: "IPV6ONLY",
}
var IPVersion_Version_value = map[string]int32{
	"DUAL":     0,
	"IPV4ONLY": 1,
	"IPV6ONLY": 2,
}

func (x IPVersion_Version) String() string {
	return proto.EnumName(IPVersion_Version_name, int32(x))
}
func (IPVersion_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

type ServerConfiguration struct {
	BindTo            string     `protobuf:"bytes,1,opt,name=bindTo" json:"bindTo,omitempty"`
	Pins              *Pins      `protobuf:"bytes,2,opt,name=pins" json:"pins,omitempty"`
	Debug             bool       `protobuf:"varint,3,opt,name=debug" json:"debug,omitempty"`
	UpdateURL         string     `protobuf:"bytes,4,opt,name=updateURL" json:"updateURL,omitempty"`
	ConfigurationFile string     `protobuf:"bytes,5,opt,name=configurationFile" json:"configurationFile,omitempty"`
	Password          string     `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	PiBlaster         string     `protobuf:"bytes,7,opt,name=piBlaster" json:"piBlaster,omitempty"`
	ServerName        string     `protobuf:"bytes,8,opt,name=serverName" json:"serverName,omitempty"`
	IpVersion         *IPVersion `protobuf:"bytes,9,opt,name=ipVersion" json:"ipVersion,omitempty"`
}

func (m *ServerConfiguration) Reset()                    { *m = ServerConfiguration{} }
func (m *ServerConfiguration) String() string            { return proto.CompactTextString(m) }
func (*ServerConfiguration) ProtoMessage()               {}
func (*ServerConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ServerConfiguration) GetPins() *Pins {
	if m != nil {
		return m.Pins
	}
	return nil
}

func (m *ServerConfiguration) GetIpVersion() *IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return nil
}

type ChangeParameterMessage struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	// Types that are valid to be assigned to Parameter:
	//	*ChangeParameterMessage_ServerName
	//	*ChangeParameterMessage_FadeTime
	//	*ChangeParameterMessage_IpVersion
	//	*ChangeParameterMessage_Pins
	Parameter isChangeParameterMessage_Parameter `protobuf_oneof:"parameter"`
}

func (m *ChangeParameterMessage) Reset()                    { *m = ChangeParameterMessage{} }
func (m *ChangeParameterMessage) String() string            { return proto.CompactTextString(m) }
func (*ChangeParameterMessage) ProtoMessage()               {}
func (*ChangeParameterMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isChangeParameterMessage_Parameter interface {
	isChangeParameterMessage_Parameter()
}

type ChangeParameterMessage_ServerName struct {
	ServerName string `protobuf:"bytes,2,opt,name=serverName,oneof"`
}
type ChangeParameterMessage_FadeTime struct {
	FadeTime *FadeTime `protobuf:"bytes,3,opt,name=fadeTime,oneof"`
}
type ChangeParameterMessage_IpVersion struct {
	IpVersion *IPVersion `protobuf:"bytes,4,opt,name=ipVersion,oneof"`
}
type ChangeParameterMessage_Pins struct {
	Pins *Pins `protobuf:"bytes,5,opt,name=pins,oneof"`
}

func (*ChangeParameterMessage_ServerName) isChangeParameterMessage_Parameter() {}
func (*ChangeParameterMessage_FadeTime) isChangeParameterMessage_Parameter()   {}
func (*ChangeParameterMessage_IpVersion) isChangeParameterMessage_Parameter()  {}
func (*ChangeParameterMessage_Pins) isChangeParameterMessage_Parameter()       {}

func (m *ChangeParameterMessage) GetParameter() isChangeParameterMessage_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *ChangeParameterMessage) GetServerName() string {
	if x, ok := m.GetParameter().(*ChangeParameterMessage_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ChangeParameterMessage) GetFadeTime() *FadeTime {
	if x, ok := m.GetParameter().(*ChangeParameterMessage_FadeTime); ok {
		return x.FadeTime
	}
	return nil
}

func (m *ChangeParameterMessage) GetIpVersion() *IPVersion {
	if x, ok := m.GetParameter().(*ChangeParameterMessage_IpVersion); ok {
		return x.IpVersion
	}
	return nil
}

func (m *ChangeParameterMessage) GetPins() *Pins {
	if x, ok := m.GetParameter().(*ChangeParameterMessage_Pins); ok {
		return x.Pins
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChangeParameterMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChangeParameterMessage_OneofMarshaler, _ChangeParameterMessage_OneofUnmarshaler, _ChangeParameterMessage_OneofSizer, []interface{}{
		(*ChangeParameterMessage_ServerName)(nil),
		(*ChangeParameterMessage_FadeTime)(nil),
		(*ChangeParameterMessage_IpVersion)(nil),
		(*ChangeParameterMessage_Pins)(nil),
	}
}

func _ChangeParameterMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChangeParameterMessage)
	// parameter
	switch x := m.Parameter.(type) {
	case *ChangeParameterMessage_ServerName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServerName)
	case *ChangeParameterMessage_FadeTime:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FadeTime); err != nil {
			return err
		}
	case *ChangeParameterMessage_IpVersion:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpVersion); err != nil {
			return err
		}
	case *ChangeParameterMessage_Pins:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pins); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChangeParameterMessage.Parameter has unexpected type %T", x)
	}
	return nil
}

func _ChangeParameterMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChangeParameterMessage)
	switch tag {
	case 2: // parameter.serverName
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Parameter = &ChangeParameterMessage_ServerName{x}
		return true, err
	case 3: // parameter.fadeTime
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FadeTime)
		err := b.DecodeMessage(msg)
		m.Parameter = &ChangeParameterMessage_FadeTime{msg}
		return true, err
	case 4: // parameter.ipVersion
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPVersion)
		err := b.DecodeMessage(msg)
		m.Parameter = &ChangeParameterMessage_IpVersion{msg}
		return true, err
	case 5: // parameter.pins
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pins)
		err := b.DecodeMessage(msg)
		m.Parameter = &ChangeParameterMessage_Pins{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChangeParameterMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChangeParameterMessage)
	// parameter
	switch x := m.Parameter.(type) {
	case *ChangeParameterMessage_ServerName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServerName)))
		n += len(x.ServerName)
	case *ChangeParameterMessage_FadeTime:
		s := proto.Size(x.FadeTime)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeParameterMessage_IpVersion:
		s := proto.Size(x.IpVersion)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeParameterMessage_Pins:
		s := proto.Size(x.Pins)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FadeTime struct {
	Milliseconds int32 `protobuf:"varint,1,opt,name=milliseconds" json:"milliseconds,omitempty"`
}

func (m *FadeTime) Reset()                    { *m = FadeTime{} }
func (m *FadeTime) String() string            { return proto.CompactTextString(m) }
func (*FadeTime) ProtoMessage()               {}
func (*FadeTime) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type IPVersion struct {
	Version IPVersion_Version `protobuf:"varint,1,opt,name=version,enum=LighterGRPC.IPVersion_Version" json:"version,omitempty"`
}

func (m *IPVersion) Reset()                    { *m = IPVersion{} }
func (m *IPVersion) String() string            { return proto.CompactTextString(m) }
func (*IPVersion) ProtoMessage()               {}
func (*IPVersion) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type Pins struct {
	RedPin   int32 `protobuf:"varint,1,opt,name=redPin" json:"redPin,omitempty"`
	GreenPin int32 `protobuf:"varint,2,opt,name=greenPin" json:"greenPin,omitempty"`
	BluePin  int32 `protobuf:"varint,3,opt,name=bluePin" json:"bluePin,omitempty"`
	WhitePin int32 `protobuf:"varint,4,opt,name=whitePin" json:"whitePin,omitempty"`
}

func (m *Pins) Reset()                    { *m = Pins{} }
func (m *Pins) String() string            { return proto.CompactTextString(m) }
func (*Pins) ProtoMessage()               {}
func (*Pins) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type BackendVersion struct {
	VersionCode     string `protobuf:"bytes,1,opt,name=VersionCode,json=versionCode" json:"VersionCode,omitempty"`
	UpdateAvailable bool   `protobuf:"varint,2,opt,name=UpdateAvailable,json=updateAvailable" json:"UpdateAvailable,omitempty"`
}

func (m *BackendVersion) Reset()                    { *m = BackendVersion{} }
func (m *BackendVersion) String() string            { return proto.CompactTextString(m) }
func (*BackendVersion) ProtoMessage()               {}
func (*BackendVersion) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func init() {
	proto.RegisterType((*ServerConfiguration)(nil), "LighterGRPC.ServerConfiguration")
	proto.RegisterType((*ChangeParameterMessage)(nil), "LighterGRPC.ChangeParameterMessage")
	proto.RegisterType((*FadeTime)(nil), "LighterGRPC.FadeTime")
	proto.RegisterType((*IPVersion)(nil), "LighterGRPC.IPVersion")
	proto.RegisterType((*Pins)(nil), "LighterGRPC.Pins")
	proto.RegisterType((*BackendVersion)(nil), "LighterGRPC.BackendVersion")
	proto.RegisterEnum("LighterGRPC.IPVersion_Version", IPVersion_Version_name, IPVersion_Version_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for System service

type SystemClient interface {
	ChangeServerParameter(ctx context.Context, in *ChangeParameterMessage, opts ...grpc.CallOption) (*Confirmation, error)
	LoadServerConfiguration(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServerConfiguration, error)
	SetServerConfiguration(ctx context.Context, in *ServerConfiguration, opts ...grpc.CallOption) (*Confirmation, error)
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BackendVersion, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) ChangeServerParameter(ctx context.Context, in *ChangeParameterMessage, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.System/ChangeServerParameter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) LoadServerConfiguration(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServerConfiguration, error) {
	out := new(ServerConfiguration)
	err := grpc.Invoke(ctx, "/LighterGRPC.System/LoadServerConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SetServerConfiguration(ctx context.Context, in *ServerConfiguration, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.System/SetServerConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BackendVersion, error) {
	out := new(BackendVersion)
	err := grpc.Invoke(ctx, "/LighterGRPC.System/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemServer interface {
	ChangeServerParameter(context.Context, *ChangeParameterMessage) (*Confirmation, error)
	LoadServerConfiguration(context.Context, *Request) (*ServerConfiguration, error)
	SetServerConfiguration(context.Context, *ServerConfiguration) (*Confirmation, error)
	Version(context.Context, *Empty) (*BackendVersion, error)
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_ChangeServerParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeParameterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ChangeServerParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.System/ChangeServerParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ChangeServerParameter(ctx, req.(*ChangeParameterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_LoadServerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).LoadServerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.System/LoadServerConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).LoadServerConfiguration(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SetServerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SetServerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.System/SetServerConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SetServerConfiguration(ctx, req.(*ServerConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.System/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LighterGRPC.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeServerParameter",
			Handler:    _System_ChangeServerParameter_Handler,
		},
		{
			MethodName: "LoadServerConfiguration",
			Handler:    _System_LoadServerConfiguration_Handler,
		},
		{
			MethodName: "SetServerConfiguration",
			Handler:    _System_SetServerConfiguration_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _System_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("system.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xcb, 0x6f, 0xd3, 0x4e,
	0x10, 0x4e, 0xd2, 0x3c, 0xec, 0x49, 0x7f, 0x7d, 0xec, 0xaf, 0x0d, 0x26, 0xa0, 0x2a, 0x32, 0x42,
	0xf4, 0x80, 0x82, 0xd4, 0x56, 0x15, 0x07, 0x2e, 0x6d, 0xa0, 0x80, 0x14, 0x4a, 0xe4, 0xb4, 0xa0,
	0x4a, 0x5c, 0x36, 0xf5, 0xd4, 0x59, 0xe1, 0xd8, 0x66, 0xd7, 0x4e, 0xd5, 0x7f, 0x90, 0x2b, 0x7f,
	0x0f, 0x37, 0xd6, 0xeb, 0x47, 0xb2, 0x10, 0xca, 0xcd, 0x33, 0xdf, 0x37, 0xb3, 0xdf, 0xbc, 0x0c,
	0xeb, 0xe2, 0x4e, 0xc4, 0x38, 0xeb, 0x47, 0x3c, 0x8c, 0x43, 0xd2, 0x1e, 0x32, 0x6f, 0x1a, 0x23,
	0x7f, 0xeb, 0x8c, 0x06, 0xdd, 0xff, 0x3c, 0x0c, 0x90, 0x53, 0x3f, 0xc3, 0xec, 0xef, 0x35, 0xf8,
	0x7f, 0x8c, 0x7c, 0x8e, 0x7c, 0x10, 0x06, 0x37, 0xcc, 0x4b, 0x38, 0x8d, 0x59, 0x18, 0x90, 0x0e,
	0x34, 0x27, 0x2c, 0x70, 0x2f, 0x42, 0xab, 0xda, 0xab, 0xee, 0x9b, 0x4e, 0x6e, 0x91, 0xa7, 0x50,
	0x8f, 0x58, 0x20, 0xac, 0x9a, 0xf4, 0xb6, 0x0f, 0xb6, 0xfb, 0x4b, 0xa9, 0xfb, 0x23, 0x09, 0x38,
	0x0a, 0x26, 0x3b, 0xd0, 0x70, 0x71, 0x92, 0x78, 0xd6, 0x9a, 0xe4, 0x19, 0x4e, 0x66, 0x90, 0xc7,
	0x60, 0x26, 0x91, 0x4b, 0x63, 0xbc, 0x74, 0x86, 0x56, 0x5d, 0xe5, 0x5d, 0x38, 0xc8, 0x73, 0xd8,
	0xbe, 0x5e, 0xd6, 0x70, 0xc6, 0x7c, 0xb4, 0x1a, 0x8a, 0xf5, 0x27, 0x40, 0xba, 0x60, 0x44, 0x54,
	0x88, 0xdb, 0x90, 0xbb, 0x56, 0x53, 0x91, 0x4a, 0x3b, 0x7d, 0x27, 0x62, 0xa7, 0x3e, 0x95, 0x3d,
	0xe0, 0x56, 0x2b, 0x7b, 0xa7, 0x74, 0x90, 0x3d, 0x00, 0xa1, 0x2a, 0x3e, 0xa7, 0x33, 0xb4, 0x0c,
	0x05, 0x2f, 0x79, 0xc8, 0x11, 0x98, 0x2c, 0xfa, 0x84, 0x5c, 0xc8, 0xa7, 0x2c, 0x53, 0xd5, 0xd9,
	0xd1, 0xea, 0x7c, 0x3f, 0xca, 0x51, 0x67, 0x41, 0xb4, 0x7f, 0x56, 0xa1, 0x33, 0x98, 0xd2, 0xc0,
	0xc3, 0x11, 0xe5, 0x32, 0x8d, 0x24, 0x7f, 0x40, 0x21, 0xa8, 0xa7, 0x4b, 0xad, 0xfe, 0x26, 0xb5,
	0xa7, 0x89, 0x49, 0xbb, 0x6a, 0xbe, 0xab, 0x68, 0x72, 0x0e, 0xc1, 0xb8, 0xa1, 0x2e, 0x5e, 0x30,
	0x89, 0xaf, 0x29, 0x35, 0xbb, 0x9a, 0x9a, 0xb3, 0x1c, 0x94, 0x61, 0x25, 0x91, 0x1c, 0x2f, 0xd7,
	0x50, 0xbf, 0xaf, 0x06, 0x19, 0xb6, 0xa0, 0x92, 0x67, 0xf9, 0x78, 0x1b, 0x7f, 0x19, 0xaf, 0x64,
	0x2b, 0xc2, 0x69, 0x5b, 0xb6, 0xb8, 0xa8, 0xd3, 0xee, 0x83, 0x51, 0xa8, 0x20, 0x36, 0xac, 0xcf,
	0x98, 0xef, 0x33, 0x81, 0x72, 0x66, 0xae, 0x50, 0x05, 0x37, 0x1c, 0xcd, 0x67, 0xcf, 0xc1, 0x2c,
	0xdf, 0x27, 0x2f, 0xa1, 0x35, 0xcf, 0x85, 0xa6, 0xdc, 0x8d, 0x83, 0xbd, 0xd5, 0x42, 0xfb, 0x45,
	0xd3, 0x0b, 0xba, 0xfd, 0x02, 0x5a, 0x45, 0x12, 0x03, 0xea, 0xaf, 0x2f, 0x4f, 0x86, 0x5b, 0x15,
	0xb2, 0x0e, 0x86, 0x0c, 0x39, 0xfa, 0x78, 0x3e, 0xbc, 0xda, 0xaa, 0xe6, 0xd6, 0xb1, 0xb2, 0x6a,
	0x76, 0x04, 0xf5, 0xb4, 0x88, 0x74, 0xb9, 0x39, 0xba, 0xf2, 0x33, 0x57, 0x97, 0x5b, 0xe9, 0xa0,
	0x3c, 0x8e, 0x18, 0xa4, 0x48, 0x4d, 0x21, 0xa5, 0x4d, 0x2c, 0x68, 0x4d, 0xfc, 0x04, 0x53, 0x68,
	0x4d, 0x41, 0x85, 0x99, 0x46, 0xdd, 0x4e, 0x59, 0xac, 0xa0, 0x7a, 0x16, 0x55, 0xd8, 0xf6, 0x17,
	0xd8, 0x38, 0xa5, 0xd7, 0x5f, 0x31, 0x70, 0x0b, 0xa5, 0x3d, 0x68, 0xe7, 0x9f, 0x83, 0xd0, 0xc5,
	0x7c, 0x1f, 0xda, 0xf3, 0x85, 0x8b, 0xec, 0xc3, 0xe6, 0xa5, 0x3a, 0x8a, 0x93, 0x39, 0x65, 0x3e,
	0x9d, 0xf8, 0xd9, 0x5e, 0x18, 0xce, 0x66, 0xa2, 0xbb, 0x0f, 0x7e, 0xd4, 0xa0, 0x39, 0x56, 0x97,
	0x4e, 0xae, 0x60, 0x37, 0xdb, 0xbe, 0xec, 0x98, 0xcb, 0x1d, 0x24, 0x4f, 0xb4, 0x6e, 0xae, 0xde,
	0xd0, 0xee, 0x43, 0x9d, 0x94, 0x1e, 0x1b, 0x9f, 0xa9, 0x5b, 0xb3, 0x2b, 0x64, 0x0c, 0x0f, 0x86,
	0x21, 0x75, 0x57, 0xfd, 0x25, 0x76, 0xb4, 0x38, 0x07, 0xbf, 0x25, 0x28, 0xe2, 0x6e, 0x4f, 0xf3,
	0xae, 0x88, 0x93, 0x49, 0x3f, 0x43, 0x67, 0x8c, 0xf1, 0xaa, 0x9c, 0xff, 0x8c, 0xbe, 0x5f, 0xed,
	0xab, 0xc5, 0x52, 0x10, 0x8d, 0xf7, 0x66, 0x16, 0xc5, 0x77, 0xdd, 0x47, 0x9a, 0x4f, 0x9f, 0x8d,
	0x5d, 0x99, 0x34, 0xd5, 0x5f, 0xf1, 0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xc4, 0x0c,
	0x85, 0x41, 0x05, 0x00, 0x00,
}
