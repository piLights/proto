// Code generated by protoc-gen-go.
// source: initialzer.proto
// DO NOT EDIT!

package LighterGRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServiceType int32

const (
	ServiceType_RGB    ServiceType = 0
	ServiceType_RGBW   ServiceType = 1
	ServiceType_WS2801 ServiceType = 2
)

var ServiceType_name = map[int32]string{
	0: "RGB",
	1: "RGBW",
	2: "WS2801",
}
var ServiceType_value = map[string]int32{
	"RGB":    0,
	"RGBW":   1,
	"WS2801": 2,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}
func (ServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ServiceTypeMessage struct {
	ServiceType ServiceType `protobuf:"varint,1,opt,name=serviceType,enum=LighterGRPC.ServiceType" json:"serviceType,omitempty"`
}

func (m *ServiceTypeMessage) Reset()                    { *m = ServiceTypeMessage{} }
func (m *ServiceTypeMessage) String() string            { return proto.CompactTextString(m) }
func (*ServiceTypeMessage) ProtoMessage()               {}
func (*ServiceTypeMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ServiceTypeMessage) GetServiceType() ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return ServiceType_RGB
}

func init() {
	proto.RegisterType((*ServiceTypeMessage)(nil), "LighterGRPC.ServiceTypeMessage")
	proto.RegisterEnum("LighterGRPC.ServiceType", ServiceType_name, ServiceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Initializer service

type InitializerClient interface {
	LoadType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceTypeMessage, error)
}

type initializerClient struct {
	cc *grpc.ClientConn
}

func NewInitializerClient(cc *grpc.ClientConn) InitializerClient {
	return &initializerClient{cc}
}

func (c *initializerClient) LoadType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceTypeMessage, error) {
	out := new(ServiceTypeMessage)
	err := grpc.Invoke(ctx, "/LighterGRPC.Initializer/LoadType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Initializer service

type InitializerServer interface {
	LoadType(context.Context, *Empty) (*ServiceTypeMessage, error)
}

func RegisterInitializerServer(s *grpc.Server, srv InitializerServer) {
	s.RegisterService(&_Initializer_serviceDesc, srv)
}

func _Initializer_LoadType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializerServer).LoadType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LighterGRPC.Initializer/LoadType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializerServer).LoadType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Initializer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LighterGRPC.Initializer",
	HandlerType: (*InitializerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadType",
			Handler:    _Initializer_LoadType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initialzer.proto",
}

func init() { proto.RegisterFile("initialzer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0xcb, 0x2c,
	0xc9, 0x4c, 0xcc, 0xa9, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xf6, 0xc9,
	0x4c, 0xcf, 0x28, 0x49, 0x2d, 0x72, 0x0f, 0x0a, 0x70, 0x96, 0xe2, 0x4d, 0x4f, 0xcd, 0x4b, 0x2d,
	0x4a, 0xcc, 0x81, 0xc8, 0x29, 0x05, 0x70, 0x09, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x86,
	0x54, 0x16, 0xa4, 0xfa, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x59, 0x71, 0x71, 0x17, 0x23,
	0x44, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x24, 0xf4, 0x90, 0xcc, 0xd1, 0x43, 0xd2, 0x15,
	0x84, 0xac, 0x58, 0x4b, 0x87, 0x8b, 0x1b, 0x49, 0x4e, 0x88, 0x9d, 0x8b, 0x39, 0xc8, 0xdd, 0x49,
	0x80, 0x41, 0x88, 0x83, 0x8b, 0x25, 0xc8, 0xdd, 0x29, 0x5c, 0x80, 0x51, 0x88, 0x8b, 0x8b, 0x2d,
	0x3c, 0xd8, 0xc8, 0xc2, 0xc0, 0x50, 0x80, 0xc9, 0x28, 0x80, 0x8b, 0xdb, 0x13, 0xe2, 0xde, 0xcc,
	0xaa, 0xd4, 0x22, 0x21, 0x47, 0x2e, 0x0e, 0x9f, 0xfc, 0xc4, 0x14, 0xb0, 0x4e, 0x21, 0x14, 0xfb,
	0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0xa5, 0xe4, 0x71, 0xb9, 0x01, 0xea, 0x72, 0x25, 0x06, 0x27, 0x51,
	0x2e, 0xc1, 0x94, 0x54, 0xbd, 0x82, 0xcc, 0x1c, 0x90, 0xc2, 0x62, 0x88, 0x37, 0x03, 0x18, 0x93,
	0xd8, 0xc0, 0x0c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x28, 0xeb, 0xd7, 0x1f, 0x01,
	0x00, 0x00,
}
